
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Sawmoog.h"

void Sawmoog__ctx_type_19_init(Sawmoog__ctx_type_19 &_output_){
   Sawmoog__ctx_type_19 _ctx;
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Sawmoog_heun(Sawmoog__ctx_type_19 &_ctx, float input, float fh, float res){
   float wt0;
   wt0 = Sawmoog_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float wt1;
   wt1 = Sawmoog_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (wt0 + (- wt1)));
   float wt3;
   wt3 = Sawmoog_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (wt1 + (- wt3)));
   float wt5;
   wt5 = Sawmoog_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (wt3 + (- wt5)));
   float wt7;
   wt7 = Sawmoog_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (wt5 + (- wt7)));
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Sawmoog_cubic_clipper((input + (-4.f * pt3 * res)));
   float w1;
   w1 = Sawmoog_cubic_clipper(pt0);
   float dp0;
   dp0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Sawmoog_cubic_clipper(pt1);
   float dp1;
   dp1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Sawmoog_cubic_clipper(pt2);
   float dp2;
   dp2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Sawmoog_cubic_clipper(pt3);
   float dp3;
   dp3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + (0.5f * (dp0 + dpt0)));
   _ctx.p1 = (_ctx.p1 + (0.5f * (dp1 + dpt1)));
   _ctx.p2 = (_ctx.p2 + (0.5f * (dp2 + dpt2)));
   _ctx.p3 = (_ctx.p3 + (0.5f * (dp3 + dpt3)));
   return _ctx.p3;
}

void Sawmoog__ctx_type_20_init(Sawmoog__ctx_type_20 &_output_){
   Sawmoog__ctx_type_20 _ctx;
   Sawmoog__ctx_type_19_init(_ctx.h);
   _ctx.fh = 0.0f;
   Sawmoog__ctx_type_0_init(_ctx._inst12a);
   _output_ = _ctx;
   return ;
}

float Sawmoog_moog(Sawmoog__ctx_type_20 &_ctx, float input, float cut, float res){
   if(Sawmoog_change(_ctx._inst12a,cut)){
      _ctx.fh = Sawmoog_tune(cut);
   }
   Sawmoog_heun(_ctx.h,input,_ctx.fh,res);
   Sawmoog_heun(_ctx.h,input,_ctx.fh,res);
   Sawmoog_heun(_ctx.h,input,_ctx.fh,res);
   float out;
   out = Sawmoog_heun(_ctx.h,input,_ctx.fh,res);
   return out;
}

void Sawmoog__ctx_type_21_init(Sawmoog__ctx_type_21 &_output_){
   Sawmoog__ctx_type_21 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Sawmoog__ctx_type_20_init(_ctx._inst5c4);
   Sawmoog__ctx_type_0_init(_ctx._inst12a);
   _output_ = _ctx;
   return ;
}

float Sawmoog_process(Sawmoog__ctx_type_21 &_ctx, float cv, float cut, float res){
   float y;
   y = 0.0f;
   if(Sawmoog_change(_ctx._inst12a,cv)){
      _ctx.rate = Sawmoog_cvToRate(cv);
   }
   _ctx.phase = (_ctx.phase + (2.f * _ctx.rate));
   if(_ctx.phase > (1.f + (- _ctx.rate))){
      y = (-1.f + _ctx.phase + (- (_ctx.phase / _ctx.rate)) + (1.f / _ctx.rate));
      _ctx.phase = (-2.f + _ctx.phase);
   }
   else
   {
      y = _ctx.phase;
   }
   return Sawmoog_moog(_ctx._inst5c4,y,cut,res);
}


