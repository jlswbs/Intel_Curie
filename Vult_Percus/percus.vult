/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Drum percussion synth
*/

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun pitchToRate_1024(pitch) @[table(size=32,min=0.0,max=127.0)] {
   return 0.18984168003671556 * exp(0.057762265046662105 * pitch);
}

fun cvToPitch(cv) {
   return cv * 120.0 + 24.0;
}

fun cvToRate_1024(cv) @[table(size=32,min=0.0,max=0.9)] {
   return pitchToRate_1024(cvToPitch(cv));
}

fun fold(signal:real, level:real) : real {
   val sign = if signal > 0.0 then 1.0 else -1.0;
   val amp = abs(signal) * (8.0 * level + 1.0);
   val base = floor(amp);
   val delta = amp - base;
   val out = if int(base) % 2 <> 0 then 1.0 - delta else delta;
   return sign * out;
}

fun nsine(x) @[table(size=128,min=0.0,max=1.0)] {
   return sin(6.283185307179586 * x);
}

fun phase(cv:real, reset:real) : real {
   mem rate;
   if(change(cv))
   {
      rate = cvToRate_1024(cv);
   }
   mem phase = if edge(reset > 0.5) then 0.0 else phase + rate;
   phase = if phase > 1024.0 then phase - 1024.0 else phase;
   return phase / 1024.0;
}

fun sine(cv, reset) {
   mem trig;
   if(edge(reset > 0.5)) {
      trig = true;
   }
   val phase = p:phase(cv, 0.0);
   // the frequency changes only during the zero crossings
   if(phase < eps() && trig) {
      trig = false;
      _ = p:phase(cv, 0.0);
   }
   return nsine(phase);
}


fun ahr(gate:real, a:real, h:real, r:real) {
   mem state;
   mem out;
   mem rate;
   mem target;
   mem hold_phase;

   val release = 0;
   val attack  = 1;
   val hold    = 2;
   val reset   = 3;

   val bgate = gate > 0.0;

   if(edge(bgate)) {
      state = reset;
   }

   val resetting = if state == reset then 1.0 else 0.0;

   // transitions

   if(edge(out > 1024.0)) {
      hold_phase = 0.0;
      state = hold;
   }
   if(out < 10.0 && state == reset) {
      state = attack;
   }
   if(hold_phase > 100.0 && state == hold) {
      state = release;
   }

   // states

   if(state == reset) {
      rate = 1.0 / (100.0 * 0.01 + 0.01);
      target = 0.0;
   }
   if(state == attack) {
      rate = 1.0 / (100.0 * a + 0.01);
      target = 1.2 * 1024.0;
   }
   if(state == hold) {
      val hrate = 1.0 / (100.0 * h + 0.01);
      hold_phase = hold_phase + hrate;
   }
   if(state == release) {
      rate = 1.0 / (100.0 * r + 0.01);
      target = 0.0;
   }

   out = out + (target - out) * rate * 0.005;


   return clip(out/1024.0,0.0,1.0), resetting;
}

fun pinker(x:real){
   mem w1;
   val b0 = 0.02771298631913731;
   val b1 = 0.02771298631913731;
   val a1 = -0.9445740273617255;
   val w0 = x - a1*w1;
   val y0 = b0*w0 + b1*w1;
   w1 = w0;
   return y0;
}

fun noise(color) {
   mem x1 = (x1 * 17389 + 7919) % 32768;
   val y1 = real(x1)/32768.0;
   mem x2 = (x2 * 27449 + 12553) % 32768;
   val y2 = real(x2)/32768.0;
   val out = if color>0.5 then pinker(y1-y2) else y1-y2;
   return out/2.0;
}

fun process(gate, odecay, pitch, level, noise) {

   val osc_env, env_reset = ahr(gate, 0.01, 0.1 + odecay ,odecay+0.01);
   val osc = sine(pitch, env_reset);
   val folder = fold(osc+noise(noise), level);

   return osc_env * folder;
}