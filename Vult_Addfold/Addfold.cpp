
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Addfold.h"

float Addfold_fold(float x, float lim){
   while((x > lim) || (x < (- lim))){
      if(x > lim){
         x = (lim + (- (x + (- lim))));
      }
      else
      {
         if(x < (- lim)){
            x = ((- lim) + (- lim) + (- x));
         }
      }
   }
   return x;
}

void Addfold__ctx_type_16_init(Addfold__ctx_type_16 &_output_){
   Addfold__ctx_type_16 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Addfold__ctx_type_4_init(_ctx._inst32b);
   Addfold__ctx_type_5_init(_ctx._inst12f);
   _output_ = _ctx;
   return ;
}

float Addfold_phase(Addfold__ctx_type_16 &_ctx, float cv, float reset){
   if(Addfold_change(_ctx._inst12f,cv)){
      _ctx.rate = Addfold_cvToRate_1024(cv);
   }
   if(Addfold_edge(_ctx._inst32b,(reset > 0.5f))){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009765625f * _ctx.phase);
}

void Addfold__ctx_type_17_init(Addfold__ctx_type_17 &_output_){
   Addfold__ctx_type_17 _ctx;
   _ctx.trig = false;
   Addfold__ctx_type_16_init(_ctx._inst5ce);
   Addfold__ctx_type_16_init(_ctx._inst3ce);
   Addfold__ctx_type_4_init(_ctx._inst12b);
   _output_ = _ctx;
   return ;
}

float Addfold_sine(Addfold__ctx_type_17 &_ctx, float cv, float reset){
   if(Addfold_edge(_ctx._inst12b,(reset > 0.5f))){
      _ctx.trig = true;
   }
   float phase;
   phase = Addfold_phase(_ctx._inst3ce,cv,0.0f);
   if((phase < 1e-018f) && _ctx.trig){
      _ctx.trig = false;
      Addfold_phase(_ctx._inst5ce,cv,0.0f);
   }
   return Addfold_nsine(phase);
}

void Addfold__ctx_type_18_init(Addfold__ctx_type_18 &_output_){
   Addfold__ctx_type_18 _ctx;
   Addfold__ctx_type_17_init(_ctx._inst2b3);
   Addfold__ctx_type_17_init(_ctx._inst1b3);
   _output_ = _ctx;
   return ;
}


