/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Additive oscillator and fold distortion
*/

fun nsine(x) @[table(size=128,min=0.0,max=1.0)] {
   return sin(6.283185307179586 * x);
}

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun cvToPitch(cv) {
   return cv * 120.0 + 24.0;
}

fun pitchToRate_1024(pitch) @[table(size=32,min=0.0,max=127.0)] {
   // 2^10 /44100 440 2^((pitch - 69)/12.)
   return 0.18984168003671556 * exp(0.057762265046662105 * pitch);
}

fun cvToRate_1024(cv) @[table(size=32,min=0.0,max=0.9)] {
   return pitchToRate_1024(cvToPitch(cv));
}

fun fold(x, lim) {
  
  while (x > lim || x < -lim){
    
    if (x > lim) x = lim - (x - lim);
    else if (x < -lim) x = -lim + (-x-lim);
    
  }
    
  return x;
}


fun phase(cv:real, reset:real) : real {
   mem rate;
   if(change(cv))
   {
      rate = cvToRate_1024(cv);
   }
   mem phase = if edge(reset > 0.5) then 0.0 else phase + rate;
   phase = if phase > 1024.0 then phase - 1024.0 else phase;
   return phase / 1024.0;
}

fun sine(cv, reset) {
   mem trig;
   if(edge(reset > 0.5)) {
      trig = true;
   }
   val phase = phase(cv, 0.0);
   // the frequency changes only during the zero crossings
   if(phase < eps() && trig) {
      trig = false;
      _ = phase(cv, 0.0);
   }
   return nsine(phase);
}

fun process(cv1, cv2, rst, drv) {
   
   return fold((sine(cv1, rst) + sine(cv2, rst) / 2.0), drv);
}
