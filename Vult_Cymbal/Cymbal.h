
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef CYMBAL_H
#define CYMBAL_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Cymbal.tables.h"

typedef struct _tuple___real_real__ {
   float field_0;
   float field_1;
} _tuple___real_real__;

typedef struct Cymbal__ctx_type_0 {
   uint8_t pre;
} Cymbal__ctx_type_0;

typedef Cymbal__ctx_type_0 Cymbal_edge_type;

static_inline void Cymbal__ctx_type_0_init(Cymbal__ctx_type_0 &_output_){
   Cymbal__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Cymbal_edge_init(Cymbal__ctx_type_0 &_output_){
   Cymbal__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Cymbal_edge(Cymbal__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Cymbal__ctx_type_1 {
   float pre_x;
} Cymbal__ctx_type_1;

typedef Cymbal__ctx_type_1 Cymbal_change_type;

static_inline void Cymbal__ctx_type_1_init(Cymbal__ctx_type_1 &_output_){
   Cymbal__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Cymbal_change_init(Cymbal__ctx_type_1 &_output_){
   Cymbal__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Cymbal_change(Cymbal__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Cymbal_pitchToRate_1024_raw_c0(int index){
   return Cymbal_pitchToRate_1024_c0[index];
};

static_inline float Cymbal_pitchToRate_1024_raw_c1(int index){
   return Cymbal_pitchToRate_1024_c1[index];
};

static_inline float Cymbal_pitchToRate_1024_raw_c2(int index){
   return Cymbal_pitchToRate_1024_c2[index];
};

static_inline float Cymbal_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Cymbal_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Cymbal_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Cymbal_pitchToRate_1024_c2)[index]))));
}

static_inline float Cymbal_cvToPitch(float cv){
   return (24.f + (120.f * cv));
};

static_inline float Cymbal_cvToRate_1024_raw_c0(int index){
   return Cymbal_cvToRate_1024_c0[index];
};

static_inline float Cymbal_cvToRate_1024_raw_c1(int index){
   return Cymbal_cvToRate_1024_c1[index];
};

static_inline float Cymbal_cvToRate_1024_raw_c2(int index){
   return Cymbal_cvToRate_1024_c2[index];
};

static_inline float Cymbal_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444444444f * cv)),0,31);
   return (float_wrap_array(Cymbal_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Cymbal_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Cymbal_cvToRate_1024_c2)[index]))));
}

static_inline float Cymbal_nsine_raw_c0(int index){
   return Cymbal_nsine_c0[index];
};

static_inline float Cymbal_nsine_raw_c1(int index){
   return Cymbal_nsine_c1[index];
};

static_inline float Cymbal_nsine_raw_c2(int index){
   return Cymbal_nsine_c2[index];
};

static_inline float Cymbal_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.f * x)),0,127);
   return (float_wrap_array(Cymbal_nsine_c0)[index] + (x * (float_wrap_array(Cymbal_nsine_c1)[index] + (x * float_wrap_array(Cymbal_nsine_c2)[index]))));
}

typedef struct Cymbal__ctx_type_15 {
   float rate;
   float phase;
   Cymbal__ctx_type_0 _inst366;
   Cymbal__ctx_type_1 _inst19e;
} Cymbal__ctx_type_15;

typedef Cymbal__ctx_type_15 Cymbal_phase_type;

void Cymbal__ctx_type_15_init(Cymbal__ctx_type_15 &_output_);

static_inline void Cymbal_phase_init(Cymbal__ctx_type_15 &_output_){
   Cymbal__ctx_type_15_init(_output_);
   return ;
}

float Cymbal_phase(Cymbal__ctx_type_15 &_ctx, float cv, float reset);

typedef struct Cymbal__ctx_type_16 {
   uint8_t trig;
   Cymbal__ctx_type_15 p;
   Cymbal__ctx_type_0 _inst166;
} Cymbal__ctx_type_16;

typedef Cymbal__ctx_type_16 Cymbal_sine_type;

void Cymbal__ctx_type_16_init(Cymbal__ctx_type_16 &_output_);

static_inline void Cymbal_sine_init(Cymbal__ctx_type_16 &_output_){
   Cymbal__ctx_type_16_init(_output_);
   return ;
}

float Cymbal_sine(Cymbal__ctx_type_16 &_ctx, float cv, float reset);

typedef struct Cymbal__ctx_type_17 {
   float target;
   int state;
   float rate;
   float out;
   float hold_phase;
   float ahr_ret_1;
   float ahr_ret_0;
   Cymbal__ctx_type_0 _inst366;
   Cymbal__ctx_type_0 _inst166;
} Cymbal__ctx_type_17;

typedef Cymbal__ctx_type_17 Cymbal_ahr_type;

void Cymbal__ctx_type_17_init(Cymbal__ctx_type_17 &_output_);

static_inline void Cymbal_ahr_init(Cymbal__ctx_type_17 &_output_){
   Cymbal__ctx_type_17_init(_output_);
   return ;
}

void Cymbal_ahr(Cymbal__ctx_type_17 &_ctx, float gate, float a, float h, float r);

typedef Cymbal__ctx_type_17 Cymbal_ahr_ret_0_type;

static_inline void Cymbal_ahr_ret_0_init(Cymbal__ctx_type_17 &_output_){
   Cymbal__ctx_type_17_init(_output_);
   return ;
}

static_inline float Cymbal_ahr_ret_0(Cymbal__ctx_type_17 &_ctx){
   return _ctx.ahr_ret_0;
};

typedef Cymbal__ctx_type_17 Cymbal_ahr_ret_1_type;

static_inline void Cymbal_ahr_ret_1_init(Cymbal__ctx_type_17 &_output_){
   Cymbal__ctx_type_17_init(_output_);
   return ;
}

static_inline float Cymbal_ahr_ret_1(Cymbal__ctx_type_17 &_ctx){
   return _ctx.ahr_ret_1;
};

typedef struct Cymbal__ctx_type_18 {
   float w1;
} Cymbal__ctx_type_18;

typedef Cymbal__ctx_type_18 Cymbal_pinker_type;

static_inline void Cymbal__ctx_type_18_init(Cymbal__ctx_type_18 &_output_){
   Cymbal__ctx_type_18 _ctx;
   _ctx.w1 = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Cymbal_pinker_init(Cymbal__ctx_type_18 &_output_){
   Cymbal__ctx_type_18_init(_output_);
   return ;
}

float Cymbal_pinker(Cymbal__ctx_type_18 &_ctx, float x);

typedef struct Cymbal__ctx_type_19 {
   int x2;
   int x1;
   Cymbal__ctx_type_18 _inst115;
} Cymbal__ctx_type_19;

typedef Cymbal__ctx_type_19 Cymbal_noise_type;

void Cymbal__ctx_type_19_init(Cymbal__ctx_type_19 &_output_);

static_inline void Cymbal_noise_init(Cymbal__ctx_type_19 &_output_){
   Cymbal__ctx_type_19_init(_output_);
   return ;
}

float Cymbal_noise(Cymbal__ctx_type_19 &_ctx, float color);

typedef struct Cymbal__ctx_type_20 {
   Cymbal__ctx_type_19 _inst364;
   Cymbal__ctx_type_16 _inst232;
   Cymbal__ctx_type_17 _inst12;
} Cymbal__ctx_type_20;

typedef Cymbal__ctx_type_20 Cymbal_process_type;

void Cymbal__ctx_type_20_init(Cymbal__ctx_type_20 &_output_);

static_inline void Cymbal_process_init(Cymbal__ctx_type_20 &_output_){
   Cymbal__ctx_type_20_init(_output_);
   return ;
}

float Cymbal_process(Cymbal__ctx_type_20 &_ctx, float gate, float decay, float pitch);



#endif // CYMBAL_H
