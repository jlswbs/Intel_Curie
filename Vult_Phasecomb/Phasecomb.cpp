
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Phasecomb.h"

void Phasecomb__ctx_type_7_init(Phasecomb__ctx_type_7 &_output_){
   Phasecomb__ctx_type_7 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Phasecomb_dcblock(Phasecomb__ctx_type_7 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Phasecomb__ctx_type_8_init(Phasecomb__ctx_type_8 &_output_){
   Phasecomb__ctx_type_8 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Phasecomb_soft(Phasecomb__ctx_type_8 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Phasecomb__ctx_type_32_init(Phasecomb__ctx_type_32 &_output_){
   Phasecomb__ctx_type_32 _ctx;
   _ctx.write_pos = 0;
   float_init_array(675,0.0f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

float Phasecomb_delayx(Phasecomb__ctx_type_32 &_ctx, float x, float cv){
   _ctx.write_pos = ((1 + _ctx.write_pos) % 675);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 675.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- Phasecomb_cvToperiod(cv))),r_size);
   if(r_index < 0.0f){
      r_index = (r_index + r_size);
   }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 675);
   int t2;
   t2 = ((1 + t1) % 675);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (x1 + (decimal * (x2 + (- x1))));
   return ret;
}

void Phasecomb__ctx_type_37_init(Phasecomb__ctx_type_37 &_output_){
   Phasecomb__ctx_type_37 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Phasecomb__ctx_type_4_init(_ctx._inst3e2);
   Phasecomb__ctx_type_5_init(_ctx._inst1ac);
   _output_ = _ctx;
   return ;
}

float Phasecomb_phase(Phasecomb__ctx_type_37 &_ctx, float cv, float reset){
   if(Phasecomb_change(_ctx._inst1ac,cv)){
      _ctx.rate = Phasecomb_cvToRate_1024(cv);
   }
   if(Phasecomb_edge(_ctx._inst3e2,(reset > 0.5f))){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009765625f * _ctx.phase);
}

void Phasecomb__ctx_type_38_init(Phasecomb__ctx_type_38 &_output_){
   Phasecomb__ctx_type_38 _ctx;
   _ctx.stone = 0.0f;
   _ctx.output = 0.0f;
   Phasecomb__ctx_type_32_init(_ctx._inst58f);
   Phasecomb__ctx_type_8_init(_ctx._inst46d);
   Phasecomb__ctx_type_7_init(_ctx._inst3c9);
   Phasecomb__ctx_type_5_init(_ctx._inst1ac);
   _output_ = _ctx;
   return ;
}

float Phasecomb_comb(Phasecomb__ctx_type_38 &_ctx, float in, float cv, float tone, float res){
   if(Phasecomb_change(_ctx._inst1ac,tone)){
      _ctx.stone = Phasecomb_toneCurve(tone);
   }
   float feedback;
   feedback = Phasecomb_dcblock(_ctx._inst3c9,(_ctx.output * res));
   float saturated_input;
   saturated_input = Phasecomb_saturate_soft((feedback + in));
   _ctx.output = (in + (_ctx.stone * Phasecomb_delayx(_ctx._inst58f,saturated_input,Phasecomb_soft(_ctx._inst46d,cv))));
   return _ctx.output;
}

void Phasecomb__ctx_type_39_init(Phasecomb__ctx_type_39 &_output_){
   Phasecomb__ctx_type_39 _ctx;
   _ctx.pre_phase1 = 0.0f;
   Phasecomb__ctx_type_38_init(_ctx._inst472);
   Phasecomb__ctx_type_37_init(_ctx._inst384);
   Phasecomb__ctx_type_6_init(_ctx._inst29);
   Phasecomb__ctx_type_37_init(_ctx._inst184);
   _output_ = _ctx;
   return ;
}

float Phasecomb_process(Phasecomb__ctx_type_39 &_ctx, float cv, float detune, float tone, float res){
   float phase1;
   phase1 = Phasecomb_phase(_ctx._inst184,cv,0.0f);
   float comp;
   comp = (1.f + (- phase1));
   float reset;
   reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phasecomb_phase(_ctx._inst384,(cv + Phasecomb_smooth(_ctx._inst29,(0.5f * detune))),reset);
   float sine;
   sine = Phasecomb_nsine(phase2);
   return Phasecomb_saturate((sine * Phasecomb_comb(_ctx._inst472,comp,cv,tone,res)));
}


