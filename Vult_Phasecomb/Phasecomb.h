
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef PHASECOMB_H
#define PHASECOMB_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Phasecomb.tables.h"

static_inline float Phasecomb_nsine_raw_c0(int index){
   return Phasecomb_nsine_c0[index];
};

static_inline float Phasecomb_nsine_raw_c1(int index){
   return Phasecomb_nsine_c1[index];
};

static_inline float Phasecomb_nsine_raw_c2(int index){
   return Phasecomb_nsine_c2[index];
};

static_inline float Phasecomb_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.f * x)),0,127);
   return (float_wrap_array(Phasecomb_nsine_c0)[index] + (x * (float_wrap_array(Phasecomb_nsine_c1)[index] + (x * float_wrap_array(Phasecomb_nsine_c2)[index]))));
}

typedef struct Phasecomb__ctx_type_4 {
   uint8_t pre;
} Phasecomb__ctx_type_4;

typedef Phasecomb__ctx_type_4 Phasecomb_edge_type;

static_inline void Phasecomb__ctx_type_4_init(Phasecomb__ctx_type_4 &_output_){
   Phasecomb__ctx_type_4 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Phasecomb_edge_init(Phasecomb__ctx_type_4 &_output_){
   Phasecomb__ctx_type_4_init(_output_);
   return ;
}

static_inline uint8_t Phasecomb_edge(Phasecomb__ctx_type_4 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Phasecomb__ctx_type_5 {
   float pre_x;
} Phasecomb__ctx_type_5;

typedef Phasecomb__ctx_type_5 Phasecomb_change_type;

static_inline void Phasecomb__ctx_type_5_init(Phasecomb__ctx_type_5 &_output_){
   Phasecomb__ctx_type_5 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Phasecomb_change_init(Phasecomb__ctx_type_5 &_output_){
   Phasecomb__ctx_type_5_init(_output_);
   return ;
}

static_inline uint8_t Phasecomb_change(Phasecomb__ctx_type_5 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

typedef struct Phasecomb__ctx_type_6 {
   float x;
} Phasecomb__ctx_type_6;

typedef Phasecomb__ctx_type_6 Phasecomb_smooth_type;

static_inline void Phasecomb__ctx_type_6_init(Phasecomb__ctx_type_6 &_output_){
   Phasecomb__ctx_type_6 _ctx;
   _ctx.x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Phasecomb_smooth_init(Phasecomb__ctx_type_6 &_output_){
   Phasecomb__ctx_type_6_init(_output_);
   return ;
}

static_inline float Phasecomb_smooth(Phasecomb__ctx_type_6 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Phasecomb__ctx_type_7 {
   float y1;
   float x1;
} Phasecomb__ctx_type_7;

typedef Phasecomb__ctx_type_7 Phasecomb_dcblock_type;

void Phasecomb__ctx_type_7_init(Phasecomb__ctx_type_7 &_output_);

static_inline void Phasecomb_dcblock_init(Phasecomb__ctx_type_7 &_output_){
   Phasecomb__ctx_type_7_init(_output_);
   return ;
}

float Phasecomb_dcblock(Phasecomb__ctx_type_7 &_ctx, float x0);

typedef struct Phasecomb__ctx_type_8 {
   float x4;
   float x3;
   float x2;
} Phasecomb__ctx_type_8;

typedef Phasecomb__ctx_type_8 Phasecomb_soft_type;

void Phasecomb__ctx_type_8_init(Phasecomb__ctx_type_8 &_output_);

static_inline void Phasecomb_soft_init(Phasecomb__ctx_type_8 &_output_){
   Phasecomb__ctx_type_8_init(_output_);
   return ;
}

float Phasecomb_soft(Phasecomb__ctx_type_8 &_ctx, float x1);

static_inline float Phasecomb_pitchToRate_1024_raw_c0(int index){
   return Phasecomb_pitchToRate_1024_c0[index];
};

static_inline float Phasecomb_pitchToRate_1024_raw_c1(int index){
   return Phasecomb_pitchToRate_1024_c1[index];
};

static_inline float Phasecomb_pitchToRate_1024_raw_c2(int index){
   return Phasecomb_pitchToRate_1024_c2[index];
};

static_inline float Phasecomb_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Phasecomb_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Phasecomb_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Phasecomb_pitchToRate_1024_c2)[index]))));
}

static_inline float Phasecomb_cvToPitch(float cv){
   return (24.f + (120.f * cv));
};

static_inline float Phasecomb_cvToRate_1024_raw_c0(int index){
   return Phasecomb_cvToRate_1024_c0[index];
};

static_inline float Phasecomb_cvToRate_1024_raw_c1(int index){
   return Phasecomb_cvToRate_1024_c1[index];
};

static_inline float Phasecomb_cvToRate_1024_raw_c2(int index){
   return Phasecomb_cvToRate_1024_c2[index];
};

static_inline float Phasecomb_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444444444f * cv)),0,31);
   return (float_wrap_array(Phasecomb_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Phasecomb_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Phasecomb_cvToRate_1024_c2)[index]))));
}

static_inline float Phasecomb_cvToperiod_raw_c0(int index){
   return Phasecomb_cvToperiod_c0[index];
};

static_inline float Phasecomb_cvToperiod_raw_c1(int index){
   return Phasecomb_cvToperiod_c1[index];
};

static_inline float Phasecomb_cvToperiod_raw_c2(int index){
   return Phasecomb_cvToperiod_c2[index];
};

static_inline float Phasecomb_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Phasecomb_cvToperiod_c0)[index] + (cv * (float_wrap_array(Phasecomb_cvToperiod_c1)[index] + (cv * float_wrap_array(Phasecomb_cvToperiod_c2)[index]))));
}

static_inline float Phasecomb_tanh_table_raw_c0(int index){
   return Phasecomb_tanh_table_c0[index];
};

static_inline float Phasecomb_tanh_table_raw_c1(int index){
   return Phasecomb_tanh_table_c1[index];
};

static_inline float Phasecomb_tanh_table_raw_c2(int index){
   return Phasecomb_tanh_table_c2[index];
};

static_inline float Phasecomb_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Phasecomb_tanh_table_c0)[index] + (x * (float_wrap_array(Phasecomb_tanh_table_c1)[index] + (x * float_wrap_array(Phasecomb_tanh_table_c2)[index]))));
}

static_inline float Phasecomb_saturate_soft(float x){
   return Phasecomb_tanh_table(x);
};

static_inline float Phasecomb_tanh_table2_raw_c0(int index){
   return Phasecomb_tanh_table2_c0[index];
};

static_inline float Phasecomb_tanh_table2_raw_c1(int index){
   return Phasecomb_tanh_table2_c1[index];
};

static_inline float Phasecomb_tanh_table2_raw_c2(int index){
   return Phasecomb_tanh_table2_c2[index];
};

static_inline float Phasecomb_tanh_table2(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Phasecomb_tanh_table2_c0)[index] + (x * (float_wrap_array(Phasecomb_tanh_table2_c1)[index] + (x * float_wrap_array(Phasecomb_tanh_table2_c2)[index]))));
}

static_inline float Phasecomb_saturate(float x){
   return Phasecomb_tanh_table2(x);
};

typedef struct Phasecomb__ctx_type_32 {
   int write_pos;
   float buffer[675];
} Phasecomb__ctx_type_32;

typedef Phasecomb__ctx_type_32 Phasecomb_delayx_type;

void Phasecomb__ctx_type_32_init(Phasecomb__ctx_type_32 &_output_);

static_inline void Phasecomb_delayx_init(Phasecomb__ctx_type_32 &_output_){
   Phasecomb__ctx_type_32_init(_output_);
   return ;
}

float Phasecomb_delayx(Phasecomb__ctx_type_32 &_ctx, float x, float cv);

static_inline float Phasecomb_toneCurve_raw_c0(int index){
   return Phasecomb_toneCurve_c0[index];
};

static_inline float Phasecomb_toneCurve_raw_c1(int index){
   return Phasecomb_toneCurve_c1[index];
};

static_inline float Phasecomb_toneCurve_raw_c2(int index){
   return Phasecomb_toneCurve_c2[index];
};

static_inline float Phasecomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.25f * (1.2f + tone))),0,63);
   return (float_wrap_array(Phasecomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Phasecomb_toneCurve_c1)[index] + (tone * float_wrap_array(Phasecomb_toneCurve_c2)[index]))));
}

typedef struct Phasecomb__ctx_type_37 {
   float rate;
   float phase;
   Phasecomb__ctx_type_4 _inst3e2;
   Phasecomb__ctx_type_5 _inst1ac;
} Phasecomb__ctx_type_37;

typedef Phasecomb__ctx_type_37 Phasecomb_phase_type;

void Phasecomb__ctx_type_37_init(Phasecomb__ctx_type_37 &_output_);

static_inline void Phasecomb_phase_init(Phasecomb__ctx_type_37 &_output_){
   Phasecomb__ctx_type_37_init(_output_);
   return ;
}

float Phasecomb_phase(Phasecomb__ctx_type_37 &_ctx, float cv, float reset);

typedef struct Phasecomb__ctx_type_38 {
   float stone;
   float output;
   Phasecomb__ctx_type_32 _inst58f;
   Phasecomb__ctx_type_8 _inst46d;
   Phasecomb__ctx_type_7 _inst3c9;
   Phasecomb__ctx_type_5 _inst1ac;
} Phasecomb__ctx_type_38;

typedef Phasecomb__ctx_type_38 Phasecomb_comb_type;

void Phasecomb__ctx_type_38_init(Phasecomb__ctx_type_38 &_output_);

static_inline void Phasecomb_comb_init(Phasecomb__ctx_type_38 &_output_){
   Phasecomb__ctx_type_38_init(_output_);
   return ;
}

float Phasecomb_comb(Phasecomb__ctx_type_38 &_ctx, float in, float cv, float tone, float res);

typedef struct Phasecomb__ctx_type_39 {
   float pre_phase1;
   Phasecomb__ctx_type_38 _inst472;
   Phasecomb__ctx_type_37 _inst384;
   Phasecomb__ctx_type_6 _inst29;
   Phasecomb__ctx_type_37 _inst184;
} Phasecomb__ctx_type_39;

typedef Phasecomb__ctx_type_39 Phasecomb_process_type;

void Phasecomb__ctx_type_39_init(Phasecomb__ctx_type_39 &_output_);

static_inline void Phasecomb_process_init(Phasecomb__ctx_type_39 &_output_){
   Phasecomb__ctx_type_39_init(_output_);
   return ;
}

float Phasecomb_process(Phasecomb__ctx_type_39 &_ctx, float cv, float detune, float tone, float res);



#endif // PHASECOMB_H
