
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Phasefuzz.h"

void Phasefuzz__ctx_type_17_init(Phasefuzz__ctx_type_17 &_output_){
   Phasefuzz__ctx_type_17 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Phasefuzz__ctx_type_4_init(_ctx._inst36f);
   Phasefuzz__ctx_type_5_init(_ctx._inst1b2);
   _output_ = _ctx;
   return ;
}

float Phasefuzz_phase(Phasefuzz__ctx_type_17 &_ctx, float cv, float reset){
   if(Phasefuzz_change(_ctx._inst1b2,cv)){
      _ctx.rate = Phasefuzz_cvToRate_1024(cv);
   }
   if(Phasefuzz_edge(_ctx._inst36f,(reset > 0.5f))){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009765625f * _ctx.phase);
}

void Phasefuzz__ctx_type_18_init(Phasefuzz__ctx_type_18 &_output_){
   Phasefuzz__ctx_type_18 _ctx;
   _ctx.pre_phase1 = 0.0f;
   Phasefuzz__ctx_type_17_init(_ctx._inst3f3);
   Phasefuzz__ctx_type_6_init(_ctx._inst27b);
   Phasefuzz__ctx_type_17_init(_ctx._inst1f3);
   _output_ = _ctx;
   return ;
}

float Phasefuzz_process(Phasefuzz__ctx_type_18 &_ctx, float cv, float detune){
   float phase1;
   phase1 = Phasefuzz_phase(_ctx._inst1f3,cv,0.0f);
   float comp;
   comp = (1.f + (- phase1));
   float reset;
   reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phasefuzz_phase(_ctx._inst3f3,(cv + Phasefuzz_smooth(_ctx._inst27b,(0.5f * detune))),reset);
   float sine;
   sine = Phasefuzz_nsine(phase2);
   return Phasefuzz_fuzz((comp * sine));
}


