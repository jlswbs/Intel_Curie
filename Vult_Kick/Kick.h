
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef KICK_H
#define KICK_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Kick.tables.h"

typedef struct _tuple___real_real__ {
   float field_0;
   float field_1;
} _tuple___real_real__;

typedef struct Kick__ctx_type_0 {
   uint8_t pre;
} Kick__ctx_type_0;

typedef Kick__ctx_type_0 Kick_edge_type;

static_inline void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Kick_edge_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Kick_edge(Kick__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Kick__ctx_type_1 {
   float pre_x;
} Kick__ctx_type_1;

typedef Kick__ctx_type_1 Kick_change_type;

static_inline void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Kick_change_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Kick_change(Kick__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Kick_pitchToRate_1024_raw_c0(int index){
   return Kick_pitchToRate_1024_c0[index];
};

static_inline float Kick_pitchToRate_1024_raw_c1(int index){
   return Kick_pitchToRate_1024_c1[index];
};

static_inline float Kick_pitchToRate_1024_raw_c2(int index){
   return Kick_pitchToRate_1024_c2[index];
};

static_inline float Kick_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Kick_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Kick_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Kick_pitchToRate_1024_c2)[index]))));
}

static_inline float Kick_cvToPitch(float cv){
   return (24.f + (120.f * cv));
};

static_inline float Kick_cvToRate_1024_raw_c0(int index){
   return Kick_cvToRate_1024_c0[index];
};

static_inline float Kick_cvToRate_1024_raw_c1(int index){
   return Kick_cvToRate_1024_c1[index];
};

static_inline float Kick_cvToRate_1024_raw_c2(int index){
   return Kick_cvToRate_1024_c2[index];
};

static_inline float Kick_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444444444f * cv)),0,31);
   return (float_wrap_array(Kick_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Kick_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Kick_cvToRate_1024_c2)[index]))));
}

static_inline float Kick_tanh_table_raw_c0(int index){
   return Kick_tanh_table_c0[index];
};

static_inline float Kick_tanh_table_raw_c1(int index){
   return Kick_tanh_table_c1[index];
};

static_inline float Kick_tanh_table_raw_c2(int index){
   return Kick_tanh_table_c2[index];
};

static_inline float Kick_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Kick_tanh_table_c0)[index] + (x * (float_wrap_array(Kick_tanh_table_c1)[index] + (x * float_wrap_array(Kick_tanh_table_c2)[index]))));
}

static_inline float Kick_saturate(float x){
   return Kick_tanh_table(x);
};

typedef struct Kick__ctx_type_16 {
   float w1;
} Kick__ctx_type_16;

typedef Kick__ctx_type_16 Kick_pinker_type;

static_inline void Kick__ctx_type_16_init(Kick__ctx_type_16 &_output_){
   Kick__ctx_type_16 _ctx;
   _ctx.w1 = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Kick_pinker_init(Kick__ctx_type_16 &_output_){
   Kick__ctx_type_16_init(_output_);
   return ;
}

float Kick_pinker(Kick__ctx_type_16 &_ctx, float x);

typedef struct Kick__ctx_type_17 {
   int x2;
   int x1;
   Kick__ctx_type_16 _inst1a5;
} Kick__ctx_type_17;

typedef Kick__ctx_type_17 Kick_noise_type;

void Kick__ctx_type_17_init(Kick__ctx_type_17 &_output_);

static_inline void Kick_noise_init(Kick__ctx_type_17 &_output_){
   Kick__ctx_type_17_init(_output_);
   return ;
}

float Kick_noise(Kick__ctx_type_17 &_ctx, float color);

typedef struct Kick__ctx_type_18 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Kick__ctx_type_0 _inst480;
   Kick__ctx_type_0 _inst380;
   Kick__ctx_type_1 _inst1bf;
} Kick__ctx_type_18;

typedef Kick__ctx_type_18 Kick_tricore_type;

void Kick__ctx_type_18_init(Kick__ctx_type_18 &_output_);

static_inline void Kick_tricore_init(Kick__ctx_type_18 &_output_){
   Kick__ctx_type_18_init(_output_);
   return ;
}

float Kick_tricore(Kick__ctx_type_18 &_ctx, float cv, float reset, float disable);

typedef struct Kick__ctx_type_19 {
   float out;
   Kick__ctx_type_0 _inst180;
} Kick__ctx_type_19;

typedef Kick__ctx_type_19 Kick_swept_type;

void Kick__ctx_type_19_init(Kick__ctx_type_19 &_output_);

static_inline void Kick_swept_init(Kick__ctx_type_19 &_output_){
   Kick__ctx_type_19_init(_output_);
   return ;
}

float Kick_swept(Kick__ctx_type_19 &_ctx, float gate, float start, float end, float rate);

typedef struct Kick__ctx_type_20 {
   float target;
   int state;
   float rate;
   float out;
   float hold_phase;
   float ahr_ret_1;
   float ahr_ret_0;
   Kick__ctx_type_0 _inst380;
   Kick__ctx_type_0 _inst180;
} Kick__ctx_type_20;

typedef Kick__ctx_type_20 Kick_ahr_type;

void Kick__ctx_type_20_init(Kick__ctx_type_20 &_output_);

static_inline void Kick_ahr_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20_init(_output_);
   return ;
}

void Kick_ahr(Kick__ctx_type_20 &_ctx, float gate, float a, float h, float r);

typedef Kick__ctx_type_20 Kick_ahr_ret_0_type;

static_inline void Kick_ahr_ret_0_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20_init(_output_);
   return ;
}

static_inline float Kick_ahr_ret_0(Kick__ctx_type_20 &_ctx){
   return _ctx.ahr_ret_0;
};

typedef Kick__ctx_type_20 Kick_ahr_ret_1_type;

static_inline void Kick_ahr_ret_1_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20_init(_output_);
   return ;
}

static_inline float Kick_ahr_ret_1(Kick__ctx_type_20 &_ctx){
   return _ctx.ahr_ret_1;
};

typedef struct Kick__ctx_type_21 {
   Kick__ctx_type_17 _inst4de;
   Kick__ctx_type_18 _inst3ca;
   Kick__ctx_type_19 _inst24a;
   Kick__ctx_type_20 _inst158;
} Kick__ctx_type_21;

typedef Kick__ctx_type_21 Kick_process_type;

void Kick__ctx_type_21_init(Kick__ctx_type_21 &_output_);

static_inline void Kick_process_init(Kick__ctx_type_21 &_output_){
   Kick__ctx_type_21_init(_output_);
   return ;
}

float Kick_process(Kick__ctx_type_21 &_ctx, float gate, float odecay, float pitch, float swept, float noise);



#endif // KICK_H
