
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Kick.h"

float Kick_pinker(Kick__ctx_type_16 &_ctx, float x){
   float b0;
   b0 = 0.0277129863191f;
   float b1;
   b1 = 0.0277129863191f;
   float a1;
   a1 = -0.944574027362f;
   float w0;
   w0 = (x + (- (_ctx.w1 * a1)));
   float y0;
   y0 = ((_ctx.w1 * b1) + (b0 * w0));
   _ctx.w1 = w0;
   return y0;
}

void Kick__ctx_type_17_init(Kick__ctx_type_17 &_output_){
   Kick__ctx_type_17 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Kick__ctx_type_16_init(_ctx._inst1a5);
   _output_ = _ctx;
   return ;
}

float Kick_noise(Kick__ctx_type_17 &_ctx, float color){
   _ctx.x1 = ((7919 + (17389 * _ctx.x1)) % 32768);
   float y1;
   y1 = (3.0517578125e-005f * int_to_float(_ctx.x1));
   _ctx.x2 = ((12553 + (27449 * _ctx.x2)) % 32768);
   float y2;
   y2 = (3.0517578125e-005f * int_to_float(_ctx.x2));
   float out;
   if(color > 0.5f){
      out = Kick_pinker(_ctx._inst1a5,(y1 + (- y2)));
   }
   else
   {
      out = (y1 + (- y2));
   }
   return (2.f * out);
}

void Kick__ctx_type_18_init(Kick__ctx_type_18 &_output_){
   Kick__ctx_type_18 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx.direction = false;
   Kick__ctx_type_0_init(_ctx._inst480);
   Kick__ctx_type_0_init(_ctx._inst380);
   Kick__ctx_type_1_init(_ctx._inst1bf);
   _output_ = _ctx;
   return ;
}

float Kick_tricore(Kick__ctx_type_18 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.0f;
   if(Kick_change(_ctx._inst1bf,cv)){
      _ctx.rate = (4.f * Kick_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_13;
   if(_ctx.direction){
      _if_13 = _ctx.rate;
   }
   else
   {
      _if_13 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_13);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   if(Kick_edge(_ctx._inst380,(reset > 0.0f)) || Kick_edge(_ctx._inst480,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.0f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (-1024.f + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -1024.f){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fabsf(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed;
         if(bdisable){
            reset_speed = 0.01f;
         }
         else
         {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_17;
         _cond_17 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_17)){
            _ctx.reset_phase = 0.0f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (0.0009765625f * out);
}

void Kick__ctx_type_19_init(Kick__ctx_type_19 &_output_){
   Kick__ctx_type_19 _ctx;
   _ctx.out = 0.0f;
   Kick__ctx_type_0_init(_ctx._inst180);
   _output_ = _ctx;
   return ;
}

float Kick_swept(Kick__ctx_type_19 &_ctx, float gate, float start, float end, float rate){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * rate)));
   uint8_t bgate;
   bgate = (gate > 0.5f);
   _ctx.out = (_ctx.out + (0.004f * rate * ((- _ctx.out) + (1024.f * end))));
   if(Kick_edge(_ctx._inst180,bgate)){
      _ctx.out = (1024.f * start);
   }
   return (0.0009765625f * _ctx.out);
}

void Kick__ctx_type_20_init(Kick__ctx_type_20 &_output_){
   Kick__ctx_type_20 _ctx;
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   _ctx.hold_phase = 0.0f;
   _ctx.ahr_ret_1 = 0.0f;
   _ctx.ahr_ret_0 = 0.0f;
   Kick__ctx_type_0_init(_ctx._inst380);
   Kick__ctx_type_0_init(_ctx._inst180);
   _output_ = _ctx;
   return ;
}

void Kick_ahr(Kick__ctx_type_20 &_ctx, float gate, float a, float h, float r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.0f);
   if(Kick_edge(_ctx._inst180,bgate)){
      _ctx.state = reset;
   }
   float resetting;
   if(_ctx.state == reset){
      resetting = 1.f;
   }
   else
   {
      resetting = 0.0f;
   }
   if(Kick_edge(_ctx._inst380,(_ctx.out > 1024.f))){
      _ctx.hold_phase = 0.0f;
      _ctx.state = hold;
   }
   if((_ctx.out < 10.f) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 100.f) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0.990099009901f;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == attack){
      _ctx.rate = (1.f / (0.01f + (100.f * a)));
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == hold){
      float hrate;
      hrate = (1.f / (0.01f + (100.f * h)));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = (1.f / (0.01f + (100.f * r)));
      _ctx.target = 0.0f;
   }
   _ctx.out = (_ctx.out + (0.005f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   _ctx.ahr_ret_0 = float_clip((0.0009765625f * _ctx.out),0.0f,1.f);
   _ctx.ahr_ret_1 = resetting;
   return ;
}

void Kick__ctx_type_21_init(Kick__ctx_type_21 &_output_){
   Kick__ctx_type_21 _ctx;
   Kick__ctx_type_17_init(_ctx._inst4de);
   Kick__ctx_type_18_init(_ctx._inst3ca);
   Kick__ctx_type_19_init(_ctx._inst24a);
   Kick__ctx_type_20_init(_ctx._inst158);
   _output_ = _ctx;
   return ;
}

float Kick_process(Kick__ctx_type_21 &_ctx, float gate, float odecay, float pitch, float swept, float noise){
   float osc_env;
   float env_reset;
   Kick_ahr(_ctx._inst158,gate,0.005f,(0.1f + odecay),(0.01f + odecay));
   osc_env = Kick_ahr_ret_0(_ctx._inst158);
   env_reset = Kick_ahr_ret_1(_ctx._inst158);
   float cv;
   cv = Kick_swept(_ctx._inst24a,(1.f + (- env_reset)),(pitch + (0.4f * swept)),pitch,0.1f);
   float osc;
   osc = Kick_tricore(_ctx._inst3ca,cv,0.0f,env_reset);
   float osc_sat;
   osc_sat = Kick_saturate((1.5f * osc));
   float noise_osc;
   noise_osc = (0.142857142857f * Kick_noise(_ctx._inst4de,noise));
   return (osc_env * (noise_osc + osc_sat));
}


